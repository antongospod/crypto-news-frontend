# .github/workflows/deploy.yml
name: Deploy to VPS

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Deploy to VPS
        if: github.ref == 'refs/heads/master'
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd /opt/cryptocenter
            git pull origin master
            
            # Создаем новый образ с временным тегом
            docker compose build nuxt-app
            docker tag cryptocenter_nuxt-app:latest cryptocenter_nuxt-app:new
            
            # Запускаем новый контейнер на другом порту
            docker run -d --name nuxt-app-new \
              --network cryptocenter_app-network \
              -e NODE_ENV=production \
              -e NUXT_PUBLIC_SITE_NAME=CryptoCenter \
              -e NUXT_PUBLIC_SITE_URL=https://cryptocenter.finance \
              -p 3001:3000 \
              cryptocenter_nuxt-app:new
            
            # Ждем пока новый контейнер запустится
            sleep 10
            
            # Проверяем что новый контейнер работает
            if curl -f http://localhost:3001/health 2>/dev/null || curl -f http://localhost:3001/ 2>/dev/null; then
              echo "✅ New container is healthy"
            
              # Обновляем nginx конфигурацию на новый порт
              sed -i 's/nuxt-app:3000/host.docker.internal:3001/g' nginx.conf
              docker compose restart nginx
            
              # Ждем переключения
              sleep 5
            
              # Останавливаем старый контейнер
              docker compose stop nuxt-app
              docker compose rm -f nuxt-app
            
              # Переименовываем новый контейнер
              docker stop nuxt-app-new
              docker rename nuxt-app-new nuxt-app-temp
            
              # Запускаем с правильным именем
              docker compose up nuxt-app -d
            
              # Возвращаем nginx конфиг
              sed -i 's/host.docker.internal:3001/nuxt-app:3000/g' nginx.conf
              docker compose restart nginx
            
              # Удаляем временный контейнер
              docker rm nuxt-app-temp 2>/dev/null || true
            
            else
              echo "❌ New container failed to start, keeping old one"
              docker stop nuxt-app-new 2>/dev/null || true
              docker rm nuxt-app-new 2>/dev/null || true
              exit 1
            fi
            
            # Очистка
            docker system prune -f
            echo "🎉 Zero-downtime deployment completed!"
            docker compose ps